/* \file        cc26x0.gel
 * \brief       GEL script for CC13x0/CC26x0 device family.
 */

#define HWREG(x)                    (*(unsigned int)(x))
#define FCFG1_ICEPICK_DEVICE_ID     0x50001318

int _deviceId = -1;


StartUp(int major, int minor, int patch)
{
    /* Initialize memory map */
    memorymap_init();

    /* Debugger specific handling */
    if(GEL_MatchesConnection(".*TIXDS.*") == 1)
    {
        GEL_LoadGel("$(GEL_file_dir)/cc26xx_connect_util.gel");
        GEL_LoadGel("$(GEL_file_dir)/cc26x0_xds.gel");

        DefineResets(0);

        // Issue Board Reset to ensure device is in a known state
        // Note: If you want to attach to a running target without resetting the
        //       device, you must comment out the following 4 lines:
        if(!GEL_IsConnected())
        {
            GEL_AdvancedReset("Board Reset");
        }
    }
    else if(GEL_MatchesConnection(".*JLink.*") == 1)
    {
        GEL_LoadGel("$(GEL_file_dir)/cc26xx_jlink.gel");
    }
    else
    {
        GEL_TextOut("Error: Unknown debugger.\n");
        return;
    }
}

/** \brief Determine if device is a CC13x0R1 variant */
IsCC13x0R1()
{
    int result = 0;
    if((_deviceId & 0x0FFFF000) == 0x0B9BE000)
    {
        result = 1;
    }
    return result;
}

/** \brief Determine if device is a CC26x0R1 variant */
IsCC26x0R1()
{
    int result = 0;
    int revision = (_deviceId >> 28) & 0x0F;
    if((_deviceId & 0x0FFFF000) == 0x0B99A000 && revision < 0xB)
    {
        result = 1;
    }
    return result;
}

/** \brief Determine if device is a CC26x0R2 variant */
IsCC26x0R2()
{
    int result = 0;
    int revision = (_deviceId >> 28) & 0x0F;
    if((_deviceId & 0x0FFFF000) == 0x0B99A000 && revision >= 0xB)
    {
        result = 1;
    }
    return result;
}

OnFileLoaded(int nErrorCode, int bSymbolsOnly)
{
    if (bSymbolsOnly == 0)
    {
        LoadRomSymbols();
    }
}

menuitem "CC13x0_CC26x0"
hotmenu LoadRomSymbols()
{
    if(GEL_IsConnected() == 1)
    {
        if(_deviceId == -1)
        {
            // Read from device
            _deviceId = HWREG(FCFG1_ICEPICK_DEVICE_ID);
        }

        if(IsCC13x0R1())
        {
            GEL_SymbolAdd("$(GEL_file_dir)/images/cc26xx/cc13x0_rtos_rom_syms.out");
            GEL_SymbolAdd("$(GEL_file_dir)/images/cc26xx/cc13x0_driverlib_rom_syms.out");
        }
        else if(IsCC26x0R1())
        {
            GEL_SymbolAdd("$(GEL_file_dir)/images/cc26xx/cc26x0_rtos_rom_syms.out");
            GEL_SymbolAdd("$(GEL_file_dir)/images/cc26xx/cc26x0_driverlib_rom_syms.out");
        }
        else if(IsCC26x0R2())
        {
            GEL_SymbolAdd("$(GEL_file_dir)/images/cc26xx/cc26x0r2f_rtos_rom_syms.out");
            GEL_SymbolAdd("$(GEL_file_dir)/images/cc26xx/cc26x0r2f_driverlib_rom_syms.out");
        }
        else
        {
            GEL_TextOut("Device not recognized as CC13x0, CC26x0 or CC26x0R2F device. No symbols loaded.\n");
        }
    }
    else
    {
        GEL_TextOut("No symbols loaded (not connected to target).\n");
    }
}

memorymap_init()
{
    GEL_MapOff();
    GEL_MapReset();
    GEL_MapOn();

    /*
     * Syntax for GEL_MapAddStr.
     * GEL_MapAddStr(address, page, length, "attribute", waitstate);

    Basic Attribute Types           Derived Attribute Types
    String      Description         String      Description
    R           Read                NONE        No memory/protected
    W           Write               RAM         Read and write
    P           Port                ROM         Read only
    EX          External            WOM         Write only
    EM          Emulator            INPORT      Port read only
    PR          Programmable        OUTPORT     Port write only
    ER          Erasable            IOPORT      Port read and write
    DA          Dual access         SARAM       Single access RAM
    ASn         Access size         DARAM       Dual access RAM
    SHnC        Shared              FLASH       Flash ROM
    CACHE       Cache               EXRAM       External RAM
    TX          Text                EXROM       External ROM
    MN          Monitor             EPROM       Erasable write-able EPROM
    SA          Single access       MONITOR     Monitor ROM
    FL          Flash               PRAM        Program RAM
    MR          Memory mapped       PROM        Program ROM
    NULL        NULL                NULL        NULL
    */
    GEL_MapAddStr(0x00000000, 0, 0x00020000, "R", 0);               /* Flash */
    GEL_MapAddStr(0x10000000, 0, 0x00020000, "R", 0);               /* ROM */
    GEL_MapAddStr(0x11000000, 0, 0x00002000, "R|W", 0);             /* GPRAM */
    GEL_MapAddStr(0x20000000, 0, 0x00005000, "R|W", 0);             /* SRAM */
    GEL_MapAddStr(0x21000000, 0, 0x00001000, "R|W", 0);             /* RFC_SRAM */
    GEL_MapAddStr(0x21008000, 0, 0x00000800, "R|W", 0);             /* MDM_RAM */
    GEL_MapAddStr(0x2100C000, 0, 0x00000800, "R|W", 0);             /* RFE_RAM */
    GEL_MapAddStr(0x40000000, 0, 0x000E1028, "R|W", 0);             /* Peripherals */
    GEL_MapAddStr(0x40031000, 0, 0x00001000, "NONE", 0);            /* Protected */
    GEL_MapAddStr(0x40092000, 0, 0x00000030, "R|W|RUN_NONE", 0);    /* AON_RTC, only read when halted */
    GEL_MapAddStr(0x50001000, 0, 0x00000400, "R", 0);               /* FCFG1 */
    GEL_MapAddStr(0x50002000, 0, 0x00000400, "R", 0);               /* FCFG2 */
    GEL_MapAddStr(0x50003000, 0, 0x00001000, "R", 0);               /* CCFG */
    GEL_MapAddStr(0xE0000000, 0, 0x00003000, "R|W", 0);             /* CPU_ITM, CPU_DWT, CPU_FPB */
    GEL_MapAddStr(0xE000E000, 0, 0x00001000, "R|W", 0);             /* CPU_SCS */
    GEL_MapAddStr(0xE0040000, 0, 0x00001000, "R|W", 0);             /* CPU_TPIU */
    GEL_MapAddStr(0xE00FE000, 0, 0x00001000, "R|W", 0);             /* CPU_TIPROP */

    GEL_TextOut("Memory Map Initialization Complete.\n");
}
